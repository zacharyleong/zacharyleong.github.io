---
interface Props {
  images: Array<{ src: string; alt: string; caption?: string }>;
  id?: string;
  transition?: 'slide' | 'fade';
  theme?: 'light' | 'dark';
  aspectWidth?: number;
  aspectHeight?: number;
  interval?: number | false; // Bootstrap carousel interval in ms, false for no auto-slide
}

const { 
  images, 
  id = 'carousel-' + Math.random().toString(36).substr(2, 9), 
  transition = 'slide',
  theme = 'light',
  aspectWidth = 16,
  aspectHeight = 9,
  interval = false
} = Astro.props;

const aspectRatio = `${aspectWidth} / ${aspectHeight}`;
const carouselClass = transition === 'fade' ? 'carousel slide carousel-fade' : 'carousel slide';
---

<div class="carousel-wrapper" data-theme={theme} style={`aspect-ratio: ${aspectRatio}`}>
  <div id={id} class={carouselClass} data-bs-ride={interval !== false ? "carousel" : false} data-bs-interval={interval || false}>
    <div class="carousel-indicators">
      {images.map((_, index) => (
        <button 
          type="button" 
          data-bs-target={`#${id}`} 
          data-bs-slide-to={index} 
          class={index === 0 ? 'active' : ''} 
          aria-current={index === 0 ? 'true' : false}
          aria-label={`Slide ${index + 1}`}
        ></button>
      ))}
    </div>
    <div class="carousel-inner h-100">
      {images.map((image, index) => (
        <div class={`carousel-item h-100 ${index === 0 ? 'active' : ''}`}>
          <img src={image.src} class="d-block w-100 h-100 lg-item" alt={image.alt} loading="lazy" />
        </div>
      ))}
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target={`#${id}`} data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target={`#${id}`} data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>
  <div class="carousel-caption-container">
    {images.map((image, index) => (
      <figcaption class={`carousel-caption-text ${index === 0 ? 'active' : ''}`} data-index={index}>
        {image.caption || image.alt}
      </figcaption>
    ))}
  </div>
</div>

<script>
  import 'bootstrap/dist/css/bootstrap.min.css';
  import 'lightgallery/css/lightgallery.css';
  import 'lightgallery/css/lg-zoom.css';
</script>

<script>
  // @ts-ignore - Bootstrap types
  import { Carousel } from 'bootstrap';
  import lightGallery from 'lightgallery';
  import lgZoom from 'lightgallery/plugins/zoom';

  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');
    
    carousels.forEach((carouselEl) => {
      const captions = Array.from(carouselEl.closest('.carousel-wrapper')?.querySelectorAll('.carousel-caption-text') || []);
      
      // Initialize Bootstrap Carousel
      // @ts-ignore - Bootstrap types
      const bsCarousel = new Carousel(carouselEl, {
        interval: false,
        wrap: true,
        touch: true,
        keyboard: true
      });

      // Update captions on slide change - use 'slide' event which fires when transition starts
      carouselEl.addEventListener('slide.bs.carousel', (event: any) => {
        const activeIndex = event.to;
        captions.forEach((caption, i) => {
          caption.classList.toggle('active', i === activeIndex);
        });
      });

      // Initialize LightGallery on the carousel-inner
      const inner = carouselEl.querySelector('.carousel-inner');
      if (inner) {
        lightGallery(inner as HTMLElement, {
          plugins: [lgZoom],
          selector: '.lg-item',
          speed: 500,
          download: false,
          counter: true,
          getCaptionFromTitleOrAlt: true,
        });
      }
    });
  });
</script>

<style>
  .carousel-wrapper {
    margin: 2rem 0;
    width: 100%;
    position: relative;
  }

  /* Make carousel fill the wrapper's aspect ratio */
  .carousel-wrapper .carousel {
    width: 100%;
    height: 100%;
  }

  /* Let Bootstrap handle all transitions - just add image styling */
  .carousel-item img {
    object-fit: cover;
    cursor: pointer;
  }

  /* Light theme indicators */
  [data-theme="light"] .carousel-indicators [data-bs-slide-to] {
    background-color: rgba(0, 0, 0, 0.3);
  }

  [data-theme="light"] .carousel-indicators .active {
    background-color: rgba(0, 0, 0, 0.8);
  }

  /* Dark theme indicators */
  [data-theme="dark"] .carousel-indicators [data-bs-slide-to] {
    background-color: rgba(255, 255, 255, 0.4);
  }

  [data-theme="dark"] .carousel-indicators .active {
    background-color: rgba(255, 255, 255, 0.9);
  }

  /* Light theme arrows */
  [data-theme="light"] .carousel-control-prev-icon,
  [data-theme="light"] .carousel-control-next-icon {
    filter: invert(40%);
  }

  /* Dark theme arrows - default Bootstrap is already light */
  [data-theme="dark"] .carousel-control-prev-icon,
  [data-theme="dark"] .carousel-control-next-icon {
    filter: invert(80%);
  }

  /* Captions */
  .carousel-caption-container {
    position: relative;
    min-height: 2rem;
    margin-top: 0.5rem;
  }

  .carousel-caption-text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
    text-align: center;
    opacity: 0;
    transition: opacity 0.6s ease-in-out; /* Match Bootstrap's carousel transition duration */
    pointer-events: none;
  }

  .carousel-caption-text.active {
    opacity: 1;
    pointer-events: auto;
  }

  [data-theme="dark"] .carousel-caption-text {
    color: #aaa;
  }
</style>
